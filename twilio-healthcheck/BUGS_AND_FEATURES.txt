* You can't change the website through the UI and get it to monitor another one without refreshing the app. The controller needs to check if the previous value of website is null and if not, reset messageSent to false..

* public void checkWebsiteIsRunning() should probably be private. I do not think public is required for @Scheduled, only a void method in a scanned class.

* TERRIBLE UI but I see no reason to spend a lot of time on that since this was just toying around.

* I do not like all the statics. I guess this really depends on the use case, but if multiple users are using this application simultaneously it could be a problem. If that were the case however, it would need to be changed to support multiple websites, credentials, etc. (numbers and login data). This could use a persistence layer ans spring security by implemnting SSL and encrypting the credentials and hashing the passwords. This could be extended to let users monitor multiple websites with different contact information, etc.

* Probably should use properties file for the HealthCheckData relevant to Twilio settings if it is used by only one user.

* There could also be a list of numbers.

* fixedRate in the sceduler might not be ideal. If requests take longer than 30 seconds threads could pile up. fixedDelay might be more appropriate.

* A timeout should be added.

* Sending a message when catching IOException could cause a lot of irrelevant text messages. The problem isn't necessarily on the website you are chekcing. It might make more sense to give this a minimum value or check another outbound connection we know that works (possibly on the same route).



... I am sure there are more; I spun this up in a few hours. The basic functionality is there, however.
